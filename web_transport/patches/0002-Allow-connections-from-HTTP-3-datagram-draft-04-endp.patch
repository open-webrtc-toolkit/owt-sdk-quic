From fb0780399011949619443b5535f30e498613fad6 Mon Sep 17 00:00:00 2001
From: Jianjun Zhu <jianjun.zhu@intel.com>
Date: Thu, 14 Oct 2021 10:24:53 +0800
Subject: [PATCH] Allow connections from HTTP/3 datagram draft 04 endpoints.

This is a workaround for negotiation with new clients. HTTP/3 datagram
draft 04 is not fully implemented.
---
 quic/core/http/http_constants.cc    |  1 +
 quic/core/http/http_constants.h     |  2 ++
 quic/core/http/quic_spdy_session.cc | 25 ++++++++++++++++++++++++-
 quic/core/http/quic_spdy_stream.cc  |  7 +++++--
 4 files changed, 32 insertions(+), 3 deletions(-)

diff --git a/quic/core/http/http_constants.cc b/quic/core/http/http_constants.cc
index f3ed5236..bbe3bb0f 100644
--- a/quic/core/http/http_constants.cc
+++ b/quic/core/http/http_constants.cc
@@ -18,6 +18,7 @@ std::string H3SettingsToString(Http3AndQpackSettingsIdentifiers identifier) {
     RETURN_STRING_LITERAL(SETTINGS_MAX_FIELD_SECTION_SIZE);
     RETURN_STRING_LITERAL(SETTINGS_QPACK_BLOCKED_STREAMS);
     RETURN_STRING_LITERAL(SETTINGS_H3_DATAGRAM);
+    RETURN_STRING_LITERAL(SETTINGS_H3_DATAGRAM_DRAFT04);
     RETURN_STRING_LITERAL(SETTINGS_WEBTRANS_DRAFT00);
   }
   return absl::StrCat("UNSUPPORTED_SETTINGS_TYPE(", identifier, ")");
diff --git a/quic/core/http/http_constants.h b/quic/core/http/http_constants.h
index c13a1a8c..680f1882 100644
--- a/quic/core/http/http_constants.h
+++ b/quic/core/http/http_constants.h
@@ -40,6 +40,8 @@ enum Http3AndQpackSettingsIdentifiers : uint64_t {
   SETTINGS_QPACK_BLOCKED_STREAMS = 0x07,
   // draft-ietf-masque-h3-datagram.
   SETTINGS_H3_DATAGRAM = 0x276,
+  // draft-ietf-masque-h3-datagram-04.
+  SETTINGS_H3_DATAGRAM_DRAFT04 = 0xffd277,
   // draft-ietf-webtrans-http3-00
   SETTINGS_WEBTRANS_DRAFT00 = 0x2b603742,
 };
diff --git a/quic/core/http/quic_spdy_session.cc b/quic/core/http/quic_spdy_session.cc
index 2867d52a..2041256a 100644
--- a/quic/core/http/quic_spdy_session.cc
+++ b/quic/core/http/quic_spdy_session.cc
@@ -555,6 +555,7 @@ void QuicSpdySession::FillSettingsFrame() {
   if (ShouldNegotiateHttp3Datagram() && version().UsesHttp3()) {
     QUIC_RELOADABLE_FLAG_COUNT(quic_h3_datagram);
     settings_.values[SETTINGS_H3_DATAGRAM] = 1;
+    settings_.values[SETTINGS_H3_DATAGRAM_DRAFT04] = 1;
   }
   if (WillNegotiateWebTransport()) {
     settings_.values[SETTINGS_WEBTRANS_DRAFT00] = 1;
@@ -1176,7 +1177,29 @@ bool QuicSpdySession::OnSetting(uint64_t id, uint64_t value) {
                                      error_details);
           return false;
         }
-        h3_datagram_supported_ = !!value;
+        h3_datagram_supported_ |= !!value;
+        break;
+      }
+      case SETTINGS_H3_DATAGRAM_DRAFT04: {
+        if (!ShouldNegotiateHttp3Datagram()) {
+          break;
+        }
+        QUIC_DVLOG(1) << ENDPOINT
+                      << "SETTINGS_H3_DATAGRAM_DRAFT04 received with value "
+                      << value;
+        if (!version().UsesHttp3()) {
+          break;
+        }
+        if (value != 0 && value != 1) {
+          std::string error_details = absl::StrCat(
+              "received SETTINGS_H3_DATAGRAM_DRAFT04 with invalid value ",
+              value);
+          QUIC_PEER_BUG(quic_peer_bug_10360_7) << ENDPOINT << error_details;
+          CloseConnectionWithDetails(QUIC_HTTP_RECEIVE_SPDY_SETTING,
+                                     error_details);
+          return false;
+        }
+        h3_datagram_supported_ |= !!value;
         break;
       }
       case SETTINGS_WEBTRANS_DRAFT00:
diff --git a/quic/core/http/quic_spdy_stream.cc b/quic/core/http/quic_spdy_stream.cc
index 6ec48ca5..f464e4c7 100644
--- a/quic/core/http/quic_spdy_stream.cc
+++ b/quic/core/http/quic_spdy_stream.cc
@@ -1276,11 +1276,14 @@ void QuicSpdyStream::MaybeProcessReceivedWebTransportHeaders() {
     }
   }
 
-  if (method != "CONNECT" || protocol != "webtransport" ||
-      !flow_id.has_value()) {
+  if (method != "CONNECT" || protocol != "webtransport") {
     return;
   }
 
+  if (!flow_id.has_value()) {
+    flow_id = id();
+  }
+
   web_transport_ =
       std::make_unique<WebTransportHttp3>(spdy_session_, this, id(), *flow_id);
 }
-- 
2.33.1

