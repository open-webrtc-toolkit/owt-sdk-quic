void setBuildStatus(String quicUrl, String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: quicUrl],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/quic_windows"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ]);
}
pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr:"5"))
        timeout(time: 180, unit: "MINUTES")
    }
    stages {
        stage("build quic") {
            agent{
                node {
                    label "windows"
                    customWorkspace "$env.windows_quic_build"
                }
            }
            steps {
                echo "$GIT_COMMIT"
                bat "${windows_quic_script}/build.bat ${windows_quic_build} $GIT_COMMIT"
		script{
                    if ("${GIT_BRANCH}" == 'main') {
                        bat 'copy %windows_quic_script%\\packages\\%GIT_COMMIT%.zip %windows_quic_build%\\quic-sdk-windows-x64-ci-%GIT_COMMIT:~0,8%.zip'
                        rtUpload (
                            serverId: 'default-artifactory',
                            specPath: "${windows_quic_script}/upload_artifacts.json"
                        )
                    }
                }
                cleanWs()
            }
          }
         }
    post {
        success {
            setBuildStatus("${env.quicUrl}", "Build succeeded", "SUCCESS");
            echo "I succeeeded!"
            mail to: "$env.mailtoUser",
            subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
            body: "Success with ${env.BUILD_URL}"
        }
        unstable {
            echo "I am unstable :/"
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
        failure {
            setBuildStatus("${env.quicUrl}", "Build failed", "FAILURE");
            echo "I failed :("
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}

